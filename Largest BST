class NodeValue{
    public:
    
    int minNode, maxNode, maxSize;
    
    NodeValue(int minNode, int maxNode, int maxSize){
        this -> minNode=minNode;
        this -> maxNode=maxNode;
        this -> maxSize= maxSize;
    }
};

class Solution{
    private:
    
    NodeValue helper(Node* root){
        if(root==NULL){
            int a=INT_MAX, b=INT_MIN;
            return NodeValue(a,b,0);
        }
        //postorder
        auto left= helper(root->left);
        auto right=helper(root->right);
        
        if(left.maxNode <root->data && right.minNode>root->data){
            return NodeValue(min(root->data, left.minNode), 
            max(right.maxNode,root->data), 
            left.maxSize+right.maxSize+1);
            
        }
        return NodeValue(INT_MIN,INT_MAX,max(left.maxSize, right.maxSize));
        
    }
    public:
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
        return helper(root).maxSize;    
        
    }
};
